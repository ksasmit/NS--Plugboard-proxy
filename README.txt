					Name:Kumar Sasmit
					SBU ID: 110308698
					CSE508: Network Security, Spring 2016

					Homework 3: Plugboard Proxy
------------------------------------------------------------------------------------------------------------------------------------------
Short Description:
--------------------------
1.The included source file pbproxy.c creates a plugboard proxy service for adding an extra layer of protection to publicly accessible network services like netcat and ssh connected over TCP. This adds an extra layer of security over already secure communication between nodes using the network service.
2.Pbproxy has two modes â€“ pbproxy-client and pbproxy-server. The executable program can be run in either mode by changing the command line arguments.
3.Instead of connecting directly to the service, clients connect to pbproxy-c service on their machine which connects to the pbproxy-s service running on the same server where the target service runs, which then relays all traffic to the actual service. 
4.The pbproxy-c service on the client side encrypts the message using a symmetric key, entered by the user when invoking the pbproxy service on the client side. The messages are taken directly from STDIN.
5.The encrypted message is then relayed to the pbproxy-s. Before relaying the traffic to the target service, pbproxy-s always decrypts it using a static symmetric key. This symmetric key is entered during invoking the pbproxy-s service on the server by the server admin.
6.If the data of any connection towards the protected server is not properly encrypted, then it will turn into garbage before reaching the protected service. Therefore, for successful communication between the client and the server the key used by the pbproxy on both server and the client system must be same.
7.Therefore the attacker who wishes to attack the network service needs to know the secure key used by the pbproxy service on the server. Also we configure target service to listen only on the localhost interface, making it inaccessible from the public network and any message to it can only be relayed via pbproxy-s service running on the same machine.



Implementation Details:
---------------------------------------------------------------------------------------------------------
1.The program uses OpenSSL and pthread library in Linux. 
2.It operates in two modes: "modec", on the client side, and "modes" on the server side. The mode is decided on the basis of command line arguments.

3.Server side:
Upon getting invoked on the server, pbproxy service creates a socket between it and the target service on the service and binds to it. It opens another socket for client side pbproxy service to bind. It allows more than one client pbproxy client services to connect to it at the same time. Upon each connection from the client pbproxy service, a child process is created which handles any further operation for the connection. The child process calls a separate doprocessing and creates two threads which execute continuously. One continuously reads any input from the pbproxy client service, decrypts it and sends it to target service and the other thread continuously reads the response from the target service encrypts it and sends it back to the client pbproxy service. The encryption and decryption on the pbproxy service on the server end is done based on the key entered as command line argument. 

4.Client side:
Upon getting invoked, the client pbproxy service binds to the socket between it and the pbproxy service on the server. It creates two child threads which execute continuously. One continuously reads any input stdin, encrypts it and sends it to pbproxy service on the server and the other thread continuously reads the response from the pbproxy service on the server side decrypts it and sends it to stdout via printf. The encryption and decryption on the pbproxy service on the client end is done based on the key entered as command line argument.  

5.Both the pbproxy service on the client and server side use their own keys for encryption and decryption. For successful communication between the two ends the keys must match. Otherwise, the generated text would be garbage.

6.Initialization vector or iv has been used for encryption and decryption. IV is generated by random function and is sent from the end writing on the socket for the first time, the same is read by the reading end during the first read operation.

7.The program uses AES in ctr128 mode for encrypt and decrypt operation.


Assumptions:
------------------
1. On the Client side when the user inputs "ctrl+c", both pbproxy client service as well as the target service gets closed as the command gets executed on both.
2. When the target service on the server gets killed by "ctrl+c", the pbproxy client service gets killed too.
3. When pbproxy service on the server side is killed by "ctrl+c" all the three services are killed, including target service on the server, pbproxy-client and pbproxy-server.
4. Buffer size = 4096 bytes.
5. For I/O multiplexing, I have used multithreading using pthread Linux APIs
6. The pbproxy-s supports multiple connections simultaneously, this is done by handling all operation in a separate child process for each connection, created by fork () system call.
7. The program uses AES in ctr128 mode for encrypt and decrypt operations.


compilation:
----------------
gcc -o pbproxy pbproxy.c -lcrypto -lpthread

command line execution format:
--------------------------------
pbproxy can act both as a client-side proxy and as server-side reverse proxy. i.e. it has two modes and can be selected by entering different command line arguments as shown below.

	pbproxy [-l port] -k keyfile destination port
	
	-l Reverse-proxy mode: listen for inbound connections on <port>
	
	Destination port relays received messages to <destination>:<port>
	
	-k use symmetric key = <keyfile>

Note: -l option in the command line argument invokes pbproxy as server side service(reverse proxy mode)

example:
server:
	nc -l -p 5002
pbproxy-s:
	./pbproxy -l 5001 -k 12345 localhost 5002
pbproxy-c
	./pbproxy -k 12345 localhost 5001	


To run using Makefile:
-------------------------------
To Compile:	make
To run use the following commands on three terminals opened on the same system (localhost)
make run_nc
make run_server
make run_client


Included files:
------------------
source file: pbproxy.c
Makefile
README.txt
compile.sh

Reference:
---------------
Various web resources for TCP socket APIs, pthread APIs and AES encryption/decryption APIs
